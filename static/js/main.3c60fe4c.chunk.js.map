{"version":3,"sources":["Todo.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleItemSelection","value","setState","_ref","todos","todoInd","findIndex","el","isDone","handleItemAdded","_ref2","newItemText","newTodo","id","randId","length","text","concat","toConsumableArray","handleNewItemTextChange","archive","_ref3","archivedTodos","newTodos","filter","selectedTodos","getUnDoneCount","state","show","key","prevState","itemsToShow","itemsToShowHeader","randomstring","generate","bind","_this2","_this$state","react_default","a","createElement","className","onClick","map","todo","Item","type","onChange","event","target","Controls","showFn","ShowRoom","items","header","React","Component","_ref4","children","name","checked","_ref5","_ref6","App","src_Todo","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c60fe4c.chunk.js","sourcesContent":["import React from \"react\";\nimport randomstring from \"randomstring\";\n\nclass Todo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.randId = randomstring.generate.bind(null, 5);\n\n\n    this.state = {\n      todos: [\n        { id: this.randId(), value: 1, text: '111', isDone: false },\n        { id: this.randId(), value: 2, text: '222', isDone: false },\n      ],\n      newItemText: '',\n      archivedTodos: [],\n      itemsToShow: [],\n    };\n\n  }\n\n  handleItemSelection = (value) => {\n    this.setState(({ todos }) =>{\n      const todoInd =  todos.findIndex(el => el.value === value);\n      \n      todos[todoInd].isDone = !todos[todoInd].isDone;\n\n      return {\n        todos,\n      };\n    });\n  }\n\n  handleItemAdded = () => {\n    this.setState(({ todos, newItemText, }) => {\n      let newTodo = {\n        id: this.randId(),\n        value: todos.length + 1,\n        text: newItemText,\n        isDone: false\n      };\n\n      return {\n        todos: [ ...todos, newTodo ],\n        newItemText: '',\n      };\n    });\n  }\n\n  handleNewItemTextChange = (text) => {\n    this.setState({\n      newItemText: text\n    });\n  }\n\n  archive = () => {\n    this.setState(({ todos, archivedTodos }) => {\n      let newTodos = todos.filter(el => !el.isDone);\n      const selectedTodos = todos.filter(el=> el.isDone); \n\n      return {\n        todos: [ ...newTodos ],\n        archivedTodos: [ ...archivedTodos, ...selectedTodos ],\n      };\n    });\n  };\n\n  getUnDoneCount = () => {\n    return this.state.todos.filter(el => !el.isDone).length;\n  }\n\n  show = (key) => {\n    switch(key) {\n      case 'all':\n        this.setState(prevState => (\n          {\n            itemsToShow: [ ...prevState.todos, ...prevState.archivedTodos ],\n            itemsToShowHeader: 'Everything',\n          }\n        ));\n        break;\n      case 'done':\n        this.setState(prevState => (\n          {\n            itemsToShow: prevState.todos.filter(el => el.isDone),\n            itemsToShowHeader: 'Done',\n          }\n        ));\n        break;\n      case 'active':\n        this.setState(prevState => (\n          {\n            itemsToShow: prevState.todos.filter(el => !el.isDone),\n            itemsToShowHeader: 'Active',\n          }\n        ));\n        break;\n      case 'archived':\n        this.setState(prevState => (\n          {\n            itemsToShow: prevState.archivedTodos,\n            itemsToShowHeader: 'Archived',\n          }\n        ));\n        break;\n      default:\n        this.setState({\n          itemsToShow: [],\n          itemsToShowHeader: '',\n        });\n        break;\n    }\n  }\n\n\n  render() {\n    const { todos, newItemText } = this.state;\n\n    return (\n      <div className='todo'>\n        <h2 className='todo__title'>My Todo</h2>\n        <span>{this.getUnDoneCount()} of {todos.length} remaining</span>\n      [ <span className=\"todo__archive\" onClick={this.archive}>archive</span> ]\n        <ul className='todo__list'>\n          {todos.map(todo => (\n            <Todo.Item\n              key={todo.id}\n              value={todo.value}\n              isDone={todo.isDone}\n              onClick={() => this.handleItemSelection(todo.value)}\n            >\n              {todo.text}\n            </Todo.Item>\n          ))}\n        </ul>\n\n        <input\n          type='text'\n          className='todo__new-item-text'\n          value={newItemText}\n          onChange={event => {\n            this.handleNewItemTextChange(event.target.value);\n          }}\n        />\n\n        <button className='todo__add-button' onClick={() => this.handleItemAdded()}>\n          Add\n        </button>\n\n        <Todo.Controls showFn={this.show}/>\n        <Todo.ShowRoom items={this.state.itemsToShow} header={this.state.itemsToShowHeader} />\n      </div>\n    );\n  }\n}\n\nTodo.Item = ({ value, children, isDone, onClick }) => {\n  return (\n    <li className='todo__item' onClick={() => onClick(value)}>\n      <input \n        type=\"checkbox\" \n        name=\"isDone\"\n        checked={isDone}\n        onChange={() => null}\n      />\n      <span className={isDone ? 'todo__item-crossed' : ''}>\n       {children}\n      </span> \n    </li>\n  );\n};\n\nTodo.Controls = ({showFn}) => {\n  return (\n    <div>\n      <button onClick={() => showFn('all')}>All</button>\n      <button onClick={() => showFn('done')}>Done</button>\n      <button onClick={() => showFn('active')}>Active</button>\n      <button onClick={() => showFn('archived')}>Archived</button>\n      <button onClick={() => showFn()}>Hide</button>\n    </div>\n  );\n};\n\nTodo.ShowRoom = ({items, header }) => {\n  if (items) {\n    return (\n      <div className=\"todo__showroom\">\n        <h3>{header}</h3>\n        {items.map(el => (\n          <p key={el.id}>{el.text}</p>\n        ))}\n      </div>\n    );\n  } else {\n    return ('');\n  }\n};\n\nexport default Todo;\n","import React, { Component } from 'react';\n\nimport Todo from './Todo';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <header className=\"app-header\">\n          <p>\n            ToDo react app\n          </p>\n        </header>\n        <main className=\"app-main\">\n          <Todo />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}